const Twitter = require('twitter')
const { chunk, flatten, fromPairs, mapKeys } = require('tiny-fns')

let twitterClient

module.exports = function init(creds) {
  twitterClient = new Twitter(creds)
  return getTwitterFollowerCounts
}

function getTwitterFollowerCounts(screenNames) {
  const chunkedScreenNames = chunk(screenNames, 100)
  const promises = chunkedScreenNames.map(requestFollowerCountForChunk)
  return Promise.all(promises)
    .then(chunkedFollowers => fromPairs(flatten(chunkedFollowers)))
    .then(followerCounts => setReturnCase(followerCounts, screenNames))
}

/**
 * Request users using the `screen_name` param, which can be a list of comma
 * separated Twitter screen names.
 */
function requestUsers(screen_name) {
  return twitterClient.post('users/lookup', { screen_name })
}

function requestFollowerCountForChunk(screenNames) {
  return requestUsers(screenNames.join(',')).then(users => {
    return users.map(user => [ user.screen_name, user.followers_count ])
  })
}

/**
 * Map the followers object back to the originally received screen names,
 * because the Twitter API recognizers a screen name regardless of case, but
 * returns it in the proper case.
 */
function setReturnCase(followerCounts, screenNames) {
  return mapKeys(followerCounts, name => {
    return screenNames.find(screenName => screenName.toLowerCase() === name.toLowerCase())
  })
}
